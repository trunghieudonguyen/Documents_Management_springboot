package com.example.documentsmanagement.controller;

import com.example.documentsmanagement.dto.LoginRequest;
import com.example.documentsmanagement.model.Librarian;
import com.example.documentsmanagement.repository.LibrarianRepository;
import com.example.documentsmanagement.service.PasswordResetService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "http://localhost:3000")
public class AuthController {

    private static final Logger logger = LoggerFactory.getLogger(AuthController.class);

    private final LibrarianRepository librarianRepository;
    private final PasswordResetService passwordResetService;

    public AuthController(LibrarianRepository librarianRepository,
                          PasswordResetService passwordResetService) {
        this.librarianRepository = librarianRepository;
        this.passwordResetService = passwordResetService;
    }

    // =============================
    // üîπ ƒêƒÉng nh·∫≠p
    // =============================
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest request) {
        if (request == null ||
                request.getUsername() == null || request.getUsername().isBlank() ||
                request.getPassword() == null || request.getPassword().isBlank()) {
            return ResponseEntity.badRequest()
                    .body(Map.of("error", "Thi·∫øu t√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u"));
        }

        try {
            Optional<Librarian> librarianOpt =
                    librarianRepository.findByUsernameAndPasswordHashed(request.getUsername(), request.getPassword());

            if (librarianOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(Map.of("error", "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u"));
            }

            Librarian librarian = librarianOpt.get();
            return ResponseEntity.ok(Map.of(
                    "message", "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
                    "username", librarian.getUsername(),
                    "fullName", librarian.getFullName(),
                    "email", librarian.getEmail()
            ));
        } catch (Exception ex) {
            logger.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p: {}", ex.getMessage(), ex);
            return ResponseEntity.internalServerError()
                    .body(Map.of("error", "L·ªói h·ªá th·ªëng trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p"));
        }
    }

    // =============================
    // üîπ Qu√™n m·∫≠t kh·∫©u (G·ª≠i OTP)
    // =============================
    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@RequestBody Map<String, String> body) {
        String emailOrPhone = body.get("emailOrPhone");

        if (emailOrPhone == null || emailOrPhone.isBlank()) {
            return ResponseEntity.badRequest()
                    .body(Map.of("message", "Tr∆∞·ªùng emailOrPhone l√† b·∫Øt bu·ªôc"));
        }

        try {
            Optional<Librarian> opt = librarianRepository.findByEmail(emailOrPhone);
            if (opt.isEmpty()) {
                opt = librarianRepository.findByPhoneNumber(emailOrPhone);
            }

            // ‚úÖ Kh√¥ng ti·∫øt l·ªô t√†i kho·∫£n t·ªìn t·∫°i hay kh√¥ng
            if (opt.isPresent()) {
                try {
                    passwordResetService.createAndSendOtp(opt.get());
                } catch (Exception e) {
                    logger.error("‚ùå L·ªói khi g·ª≠i OTP: {}", e.getMessage(), e);
                    return ResponseEntity.internalServerError()
                            .body(Map.of("message", "Kh√¥ng th·ªÉ g·ª≠i OTP: " + e.getMessage()));
                }
            }

            return ResponseEntity.ok(Map.of("message", "N·∫øu t√†i kho·∫£n t·ªìn t·∫°i, m√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i"));
        } catch (Exception ex) {
            logger.error("‚ùå L·ªói khi g·ª≠i OTP: {}", ex.getMessage(), ex);
            return ResponseEntity.internalServerError()
                    .body(Map.of("message", "Kh√¥ng th·ªÉ g·ª≠i OTP: " + ex.getMessage()));
        }
    }

    // =============================
    // üîπ X√°c minh OTP (tr√°nh l·ªói ‚ÄúNo static resource /verify-otp‚Äù)
    // =============================
    @PostMapping("/verify-otp")
    public ResponseEntity<?> verifyOtp(@RequestBody Map<String, String> body) {
        String emailOrPhone = body.get("emailOrPhone");
        String otp = body.get("otp");

        if (emailOrPhone == null || emailOrPhone.isBlank()
                || otp == null || otp.isBlank()) {
            return ResponseEntity.badRequest()
                    .body(Map.of("message", "C·∫ßn cung c·∫•p emailOrPhone v√† otp"));
        }

        try {
            boolean valid = passwordResetService.verifyOtp(emailOrPhone, otp);
            if (valid) {
                return ResponseEntity.ok(Map.of("message", "OTP h·ª£p l·ªá"));
            } else {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(Map.of("message", "OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n"));
            }
        } catch (Exception ex) {
            logger.error("‚ùå L·ªói x√°c minh OTP: {}", ex.getMessage(), ex);
            return ResponseEntity.internalServerError()
                    .body(Map.of("message", "Kh√¥ng th·ªÉ x√°c minh OTP: " + ex.getMessage()));
        }
    }

    // =============================
    // üîπ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
    // =============================
    @PostMapping("/reset-password")
    public ResponseEntity<?> resetPassword(@RequestBody Map<String, String> body) {
        String emailOrPhone = body.get("emailOrPhone");
        String otp = body.get("otp");
        String newPassword = body.get("newPassword");

        if (emailOrPhone == null || emailOrPhone.isBlank()
                || otp == null || otp.isBlank()
                || newPassword == null || newPassword.isBlank()) {
            return ResponseEntity.badRequest()
                    .body(Map.of("message", "C√°c tr∆∞·ªùng emailOrPhone, otp, newPassword ƒë·ªÅu b·∫Øt bu·ªôc"));
        }

        try {
            boolean ok = passwordResetService.verifyOtpAndResetPassword(emailOrPhone, otp, newPassword);
            if (ok) {
                return ResponseEntity.ok(Map.of("message", "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng"));
            } else {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(Map.of("message", "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n"));
            }
        } catch (Exception ex) {
            logger.error("‚ùå L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: {}", ex.getMessage(), ex);
            return ResponseEntity.internalServerError()
                    .body(Map.of("message", "Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: " + ex.getMessage()));
        }
    }
}
