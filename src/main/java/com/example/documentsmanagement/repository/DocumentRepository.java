package com.example.documentsmanagement.repository;

import com.example.documentsmanagement.model.Document;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface DocumentRepository extends JpaRepository<Document, Long> {

    // =========================================================================
    // üîç T√åM KI·∫æM TO√ÄN VƒÇN (title, description, documentCode) - kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
    // =========================================================================
    @Query("""
        SELECT d FROM Document d
        WHERE LOWER(d.title) LIKE LOWER(CONCAT('%', :keyword, '%'))
           OR LOWER(d.description) LIKE LOWER(CONCAT('%', :keyword, '%'))
           OR LOWER(d.documentCode) LIKE LOWER(CONCAT('%', :keyword, '%'))
    """)
    List<Document> searchByTitle(@Param("keyword") String keyword);

    // =========================================================================
    // ‚úÖ KI·ªÇM TRA S·ª∞ T·ªíN T·∫†I C·ª¶A DOCUMENT CODE (tr√°nh tr√πng m√£)
    // =========================================================================
    boolean existsByDocumentCode(String documentCode);

    // =========================================================================
    // üìã L·ªåC THEO TR·∫†NG TH√ÅI
    // =========================================================================
    List<Document> findByStatus(String status);

    // =========================================================================
    // üè¢ L·ªåC THEO PH√íNG BAN
    // =========================================================================
    List<Document> findByDepartment(String department);

    // =========================================================================
    // üóÇÔ∏è L·ªåC THEO DANH M·ª§C CATEGORY
    // =========================================================================
    @Query("SELECT d FROM Document d WHERE d.category.idDocumentCategory = :categoryId")
    List<Document> findByCategoryId(@Param("categoryId") Long categoryId);

    // =========================================================================
    // ‚ö° T·ªêI ∆ØU: L·∫§Y M√É DOCUMENT L·ªöN NH·∫§T THEO PREFIX
    // -------------------------------------------------------------------------
    // M·ª•c ƒë√≠ch: ph·ª•c v·ª• h√†m sinh documentCode trong DocumentService.
    // Query n√†y ch·ªâ t√¨m document c√≥ m√£ b·∫Øt ƒë·∫ßu b·∫±ng prefix (VD: "HC23P3A")
    // v√† l·∫•y ra m√£ l·ªõn nh·∫•t theo th·ª© t·ª± ch·ªØ, c·ª±c nhanh n·∫øu c√≥ index.
    // =========================================================================
    @Query("SELECT MAX(d.documentCode) FROM Document d WHERE d.documentCode LIKE CONCAT(:prefix, '%')")
    String findMaxDocumentCodeByPrefix(@Param("prefix") String prefix);

    // =========================================================================
    // ‚öôÔ∏è G·ª¢I √ù (t√πy ch·ªçn):
    // C√≥ th·ªÉ th√™m index trong database ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n findMaxDocumentCodeByPrefix:
    // ALTER TABLE documents ADD INDEX idx_document_code (document_code);
    // =========================================================================
}
